@{
    ViewBag.Title = "Home Page";
}
<div id="app">


    <Layout style="height:100%;position:fixed;top:0;right:0;bottom:0;left:0;">
        <i-header> <h1 style="color:#fff;">双因素分析算法模拟</h1></i-header>
        <Layout>

            <i-content>
                <div style="padding:5px;background:#f1f1f1;">
                    <i-button>增加一行</i-button>
                    <i-button>增加一列</i-button>

                </div>

                <i-table border scrollable :columns="columnConfig" :data="rows" style="width:100%;" max-height="380" stripe>

                </i-table>
                <div style="text-align:center;padding:10px">
                    <i-button v-on:click="calc">计算</i-button>
                </div>
                <i-table border scrollable :columns="resultColumnConfig" :data="resultData" style="width:100%;" max-height="380" stripe>
            </i-content>
        </Layout>
    </Layout>


    <Modal v-model="showDialog" width="360">
        <p slot="header">
            <Icon type="ios-information-circle"></Icon>
            <span>计算结果</span>
        </p>
        <div style="text-align:center">

        </div>
        <div slot="footer">
            <i-button size="large" @@click="showDialog=false">关闭</i-button>
        </div>
    </Modal>
</div>

<script>

    math.config({
        number: 'BigNumber',  // Choose 'number' (default), 'BigNumber', or 'Fraction'
        precision: 64        // 64 by default, only applicable for BigNumbers
    })

    var app = new Vue({
        el: '#app',
        data: {
            resultColumnConfig: [
                    {
                        title: "来源",
                        key: 'name',
                        minWidth: 100
                }, {
                    title: 'SS',
                    key:'ss',
                        minWidth: 100
                },{
                    title: 'df',
                    key:'ran',
                        minWidth: 100
                }, {
                    title: 'MS',
                    key: 'ms',
                        minWidth: 100

                }, {
                    title: "F",
                    key:'f',
                        minWidth: 100
                }
            ],
            showDialog: false,
            columnConfig: [],
            colCount: 3,
            rowCount: 5,
            resultData: [],
            tData: [
                [53, 61, 51],
                [47, 55, 51],
                [46, 52, 49],
                [50, 58, 54],
                [49, 54, 50]
            ],
            sums: {
                all: 0,
                rowSum: [],
                colSum: []
            },
            avgs: {
                allAvg: 0,
                rowAvg: [],
                colAvg: []
            }
        },
        computed: {
            rows: function () {
                var rows = [];
                this.tData.forEach(rowArr => {
                    var rowObj = {};
                    for (var i in rowArr) {
                        rowObj[i] = rowArr[i];
                    }
                    rows.push(rowObj);
                })

                return rows;
            }
        },
        methods: {
            calc: function () {
                var avgs = {
                    //总均值
                    allAvg: 0,
                    rowAvg: [],
                    colAvg: []
                };
                var sums = {
                    all: 0,
                    bSum: [],
                    aSum: []
                }
                var sss = {
                    all: 0,
                    b: 0,
                    a: 0
                }
                this.tData.forEach((tr) => {
                    var rowSum = 0;
                    tr.forEach(td => {
                        rowSum = math.eval(rowSum + "+" + td);
                        sums.all = math.eval(sums.all + "+" + td);
                    })
                    sums.bSum.push(rowSum);
                })
                for (var i = 0; i < this.colCount; i++) {
                    sums.aSum.push(0);
                    this.tData.forEach((tr) => {
                        sums.aSum[i] = math.eval(sums.aSum[i] + "+" + tr[i]);
                    });
                }
                avgs.allAvg = math.eval(sums.all + "/" + (this.colCount * this.rowCount));
                sums.bSum.forEach((sum) => {
                    avgs.rowAvg.push(math.eval(sum + "/" + this.colCount));
                })
                sums.aSum.forEach((sum) => {
                    avgs.colAvg.push(math.eval(sum + "/" + this.rowCount));
                })

                this.tData.forEach((tr) => {

                    tr.forEach(td => {
                        sss.all = math.eval(`${sss.all}+(${td}-${avgs.allAvg})^2`)
                    })
                })

                avgs.rowAvg.forEach((rowAvg) => {
                    sss.b = math.eval(`${sss.b}+${this.colCount}*(${rowAvg}-${avgs.allAvg})^2`)
                })
                for (var i = 0; i < this.colCount; i++) {
                 
                    sss.a = math.eval(`${sss.a}+${this.rowCount}*(${avgs.colAvg[i]}-${avgs.allAvg})^2`)
                }

                this.sums = sums;
                this.avgs = avgs;

                var rana = math.eval(`${this.colCount - 1}`);
                var ranb = math.eval(`${this.rowCount - 1}`);
                var rane = math.eval(`(${this.colCount - 1})*(${this.rowCount - 1})`);
                var SSE = math.eval(`${sss.all}-${sss.b}-${sss.a}`);
                var MSA = math.eval(`${sss.a}/${rana}`);
                var MSB = math.eval(`${sss.b}/${ranb}`);
                var MSE = math.eval(`${SSE}/${rane}`);
                var FA = math.eval(`${MSA}/${MSE}`)
                var FB = math.eval(`${MSB}/${MSE}`)

                var resultData = [{
                    name: "A因素",
                    ss: math.number( sss.a),
                    ran: math.number(rana),
                    ms: math.number(MSA),
                    f: math.number(FA)
                }, {
                    name: "B因素",
                    ss: math.number(sss.b),
                    ran:math.number( ranb),
                    ms:math.number( MSB),
                    f: math.number(FB)
                }, {
                    name: "误差",
                    ss: math.number(SSE),
                    ran: math.number(rane),
                    ms: math.number(MSE),
                }, {
                    name: "合计",
                    ss:math.number( sss.all),
                    ran: math.number(math.eval(`${rana}+${ranb}+${rane}`))
                }];

                this.resultData = resultData;
            },
            resetColumnConfig: function () {
                this.columnConfig = [{
                    title: ' ',
                    key: 0,
                    minWidth: 100,
                    fixed: 'left',
                    render: function (h, d) {
                        return h('b', "A" + (d.row._index + 1))
                    }
                }]
                for (var i = 0; i < this.colCount; i++) {
                    this.columnConfig.push({
                        title: "B" + (i + 1),
                        key: i,
                        minWidth: 100
                    })
                }
            },
            addColumnConfig: function () {

            }
        }
    });

    app.resetColumnConfig();

</script>
